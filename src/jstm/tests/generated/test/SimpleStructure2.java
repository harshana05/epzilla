//==============================================================================
//                                                                              
//  THIS FILE HAS BEEN GENERATED BY JSTM                                        
//                                                                              
//==============================================================================

package jstm.tests.generated.test;

import jstm.core.*;
import jstm.core.MethodCallback;

public class SimpleStructure2 extends jstm.core.TransactedStructure {

    public SimpleStructure2() {
        super(FIELD_COUNT);
    }

    public String getText() {
        return (String) getField(0);
    }

    public void setText(String value) {
        setField(0, value);
    }

    public Integer getInt() {
        return (Integer) getField(1);
    }

    public void setInt(Integer value) {
        setField(1, value);
    }

    public Double getDouble() {
        return (Double) getField(2);
    }

    public void setDouble(Double value) {
        setField(2, value);
    }

    public jstm.tests.generated.SimpleStructure getEntity() {
        return (jstm.tests.generated.SimpleStructure) getField(3);
    }

    public void setEntity(jstm.tests.generated.SimpleStructure value) {
        setField(3, value);
    }

    public static final int TEXT_INDEX = 0;

    public static final String TEXT_NAME = "Text";

    public static final int INT_INDEX = 1;

    public static final String INT_NAME = "Int";

    public static final int DOUBLE_INDEX = 2;

    public static final String DOUBLE_NAME = "Double";

    public static final int ENTITY_INDEX = 3;

    public static final String ENTITY_NAME = "Entity";

    public static final int FIELD_COUNT = 4;

    @Override
    public String getFieldName(int index) {
        return getFieldNameStatic(index);
    }

    public static String getFieldNameStatic(int index) {
        switch (index) {
            case 0:
                return "Text";
            case 1:
                return "Int";
            case 2:
                return "Double";
            case 3:
                return "Entity";
            default:
                throw new java.lang.IllegalArgumentException();
        }
    }

    public void method2(String sql, MethodCallback<String> callback) {
        addCall(0, new Object[] { sql }, callback);
    }

    protected String method2(String sql) {
        String message = "You must override this method in a derived class, ";
        message += "then put an instance of the derived class in the share.";
        throw new java.lang.IllegalStateException(message);
    }

    // Internal

    @Override
    protected int getClassId() {
        return 0;
    }

    @Override
    public String getObjectModelUID() {
        return "Bv3quJJvFjI3XYy9RECEWQ";
    }

    private static final int[] NON_TRANSIENT_FIELDS = new int[] { 3 };

    @Override
    protected int[] getNonTransientFields() {
        return NON_TRANSIENT_FIELDS;
    }

    @Override
    protected void serialize(TransactedObject.Version version, Writer writer) throws java.io.IOException {
        boolean[] reads = ((TransactedStructure.Version) version).getReads();
        Object[] values = ((TransactedStructure.Version) version).getWrites();

        if (reads != null) {
            writer.writeShort(Short.MAX_VALUE);

            for (int i = 0; i < 4; i++)
                writer.writeBoolean(reads[i]);
        }

        if (values != null) {
            if (values[0] != null) {
                if (values[0] == Removal.Instance)
                    writer.writeShort((short) -1);
                else {
                    writer.writeShort((short) 1);
                    writer.writeString((String) values[0]);
                }
            }

            if (values[1] != null) {
                if (values[1] == Removal.Instance)
                    writer.writeShort((short) -2);
                else {
                    writer.writeShort((short) 2);
                    writer.writeInteger(((java.lang.Integer) values[1]).intValue());
                }
            }

            if (values[2] != null) {
                if (values[2] == Removal.Instance)
                    writer.writeShort((short) -3);
                else {
                    writer.writeShort((short) 3);
                    writer.writeDouble(((java.lang.Double) values[2]).doubleValue());
                }
            }

            if (values[3] != null) {
                if (values[3] == Removal.Instance)
                    writer.writeShort((short) -4);
                else {
                    writer.writeShort((short) 4);
                    writer.writeTransactedObject((TransactedObject) values[3]);
                }
            }
        }

        writer.writeShort((short) 0);
    }

    @SuppressWarnings("null")
    @Override
    protected void deserialize(TransactedObject.Version version, Reader reader) throws java.io.IOException {
        boolean[] reads = null;
        Object[] values = null;

        short index = reader.readShort();

        if (index == Short.MAX_VALUE) {
            reads = new boolean[4];

            for (int i = 0; i < 4; i++)
                reads[i] = reader.readBoolean();

            index = reader.readShort();
        }

        if (index == 1) {
            if (values == null)
                values = new Object[4];

            values[0] = reader.readString();
            index = reader.readShort();
        } else if (index == -1) {
            if (values == null)
                values = new Object[4];

            values[0] = Removal.Instance;
            index = reader.readShort();
        }

        if (index == 2) {
            if (values == null)
                values = new Object[4];

            values[1] = new java.lang.Integer(reader.readInteger());
            index = reader.readShort();
        } else if (index == -2) {
            if (values == null)
                values = new Object[4];

            values[1] = Removal.Instance;
            index = reader.readShort();
        }

        if (index == 3) {
            if (values == null)
                values = new Object[4];

            values[2] = new java.lang.Double(reader.readDouble());
            index = reader.readShort();
        } else if (index == -3) {
            if (values == null)
                values = new Object[4];

            values[2] = Removal.Instance;
            index = reader.readShort();
        }

        if (index == 4) {
            if (values == null)
                values = new Object[4];

            values[3] = reader.readTransactedObject();
            index = reader.readShort();
        } else if (index == -4) {
            if (values == null)
                values = new Object[4];

            values[3] = Removal.Instance;
            index = reader.readShort();
        }

        ((TransactedStructure.Version) version).setReads(reads);
        ((TransactedStructure.Version) version).setWrites(values);
    }

    // Methods

    @Override
    protected Object call(int index, Object[] args) {
        switch (index) {
            case 0:
                return method2((String) args[0]);
            default:
                throw new java.lang.IllegalStateException();
        }
    }

    @Override
    protected void serializeArguments(int index, Object[] values, Writer writer) throws java.io.IOException {
        switch (index) {
            case 0: {
                writer.writeString((String) values[0]);
                break;
            }
            default:
                throw new java.lang.IllegalStateException();
        }
    }

    @Override
    protected Object[] deserializeArguments(int index, Reader reader) throws java.io.IOException {
        switch (index) {
            case 0: {
                Object[] values = new Object[1];
                values[0] = reader.readString();
                return values;
            }
            default:
                throw new java.lang.IllegalStateException();
        }
    }

    @Override
    protected void serializeResult(int index, Object result, Writer writer) throws java.io.IOException {
        switch (index) {
            case 0: {
                writer.writeString((String) result);
                break;
            }
            default:
                throw new java.lang.IllegalStateException();
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    protected Object deserializeResult(int index, Reader reader) throws java.io.IOException {
        switch (index) {
            case 0: {
                Object value;
                value = reader.readString();
                return value;
            }
            default:
                throw new java.lang.IllegalStateException();
        }
    }
}
